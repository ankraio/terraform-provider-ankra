name: Publish Release

permissions:
  contents: write

concurrency:
  group: publish
  cancel-in-progress: false

on:
  push:
    tags:
      - "v*"

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    env:
      PROVIDER_NAME: ankra
      NAMESPACE:     ankraio

    steps:
      - name: Cleanup unused directories and tools
        run: |
          df -h /
          sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell mono-devel google-cloud-sdk google-cloud-cli microsoft-edge-stable snapd --fix-missing
          sudo apt-get autoremove -y
          sudo apt-get clean
          sudo docker image prune --all --force
          sudo rm -rf \
            "$AGENT_TOOLSDIRECTORY" \
            /opt/google/chrome \
            /opt/microsoft/msedge \
            /opt/microsoft/powershell \
            /opt/pipx \
            /usr/lib/mono \
            /usr/local/julia* \
            /usr/local/lib/android \
            /usr/local/lib/node_modules \
            /usr/local/share/chromium \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /usr/share/swift
          df -h /

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_KEY }}
          passphrase:      ${{ secrets.GPG_PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6.0.0
        with:
          version: latest
          args: "release --clean --timeout 3h -p 3"
        env:
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Determine version
        id: vars
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Write static Terraform Registry manifest
        run: |
          mkdir -p dist
          cat > dist/terraform-provider-${PROVIDER_NAME}_v${{ steps.vars.outputs.VERSION }}_manifest.json <<EOF
          {
            "version": 1,
            "metadata": {
              "protocol_versions": ["5.0"]
            }
          }
          EOF

      - name: Publish GitHub Release & assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: terraform-provider-${PROVIDER_NAME} v${{ steps.vars.outputs.VERSION }}
          tag_name: v${{ steps.vars.outputs.VERSION }}
          files: |
            dist/terraform-provider-${PROVIDER_NAME}_v${{ steps.vars.outputs.VERSION }}_*.zip
            dist/terraform-provider-${PROVIDER_NAME}_v${{ steps.vars.outputs.VERSION }}_SHA256SUMS
            dist/terraform-provider-${PROVIDER_NAME}_v${{ steps.vars.outputs.VERSION }}_SHA256SUMS.sig
            dist/terraform-provider-${PROVIDER_NAME}_v${{ steps.vars.outputs.VERSION }}_manifest.json

      - name: Trigger Registry Sync
        env:
          TFC_API_TOKEN: ${{ secrets.TFC_API_TOKEN }}
          NAMESPACE:     ${{ env.NAMESPACE }}
          PROVIDER:      terraform-provider-${{ env.PROVIDER_NAME }}
        run: |
          set -euo pipefail

          echo "Fetching provider ID for ${NAMESPACE}/${PROVIDER}…"
          PROVIDER_ID=$(
            curl -s "https://registry.terraform.io/v3/providers?filter[namespace]=${NAMESPACE}&filter[name]=${PROVIDER}" \
              -H 'Accept: application/json' \
              -H "Authorization: Bearer ${TFC_API_TOKEN}"
            | jq -r '.data[0].id'
          )

          if [[ -z "$PROVIDER_ID" || "$PROVIDER_ID" == "null" ]]; then
            echo "ERROR: could not find provider ID for ${NAMESPACE}/${PROVIDER}"
            exit 1
          fi
          echo "Found provider ID: $PROVIDER_ID"

          echo "Triggering registry resync…"
          curl -X POST "https://registry.terraform.io/v3/providers/${PROVIDER_ID}/actions/sync" \
            -H 'Accept: application/json' \
            -H "Authorization: Bearer ${TFC_API_TOKEN}" \
          && echo "✅ Registry resync requested"
