name: Release Terraform Provider

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup GPG for CI signing
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          mkdir -p ~/.gnupg && chmod 700 ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "$GPG_KEY" | gpg --batch --import

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: v2.11.1
          args: release --clean
        env:
          GITHUB_TOKEN:    ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE:  ${{ secrets.GPG_PASSPHRASE }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}

      - name: Determine version
        id: vars
        run: |
          echo "VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Write static Terraform Registry manifest
        run: |
          mkdir -p dist
          cat > dist/terraform-provider-ankra_v${{ steps.vars.outputs.VERSION }}_manifest.json <<EOF
          {
            "version": 1,
            "metadata": {
              "protocol_versions": ["5.0"]
            }
          }
          EOF

      - name: Find existing GitHub Release
        id: find_release
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const tag = context.ref.replace('refs/tags/', '');
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
            });
            return release.upload_url;

      - name: Upload manifest to existing release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.find_release.outputs.result }}
          asset_path: dist/terraform-provider-ankra_v${{ steps.vars.outputs.VERSION }}_manifest.json
          asset_name: terraform-provider-ankra_v${{ steps.vars.outputs.VERSION }}_manifest.json
          asset_content_type: application/json
